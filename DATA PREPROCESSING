{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNJw7mqsXCJnU7QlLKq7B8Q",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Pooja-CG/AIML/blob/main/119CS21038_and_119CS21042__phase2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Phase**-**2**\n",
        "\n",
        "Statistical Analysis Data Exploration and analysis for the stated problem & Given Dataset (Coding)"
      ],
      "metadata": {
        "id": "DwgPDbRgWpiD"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "xDdTQ9P0Unc0",
        "outputId": "a08148b4-45bd-4ae6-a1f7-b6d8f22d4aef"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-92195c0c-bc65-4c19-a71c-5a164f394aed\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-92195c0c-bc65-4c19-a71c-5a164f394aed\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving crimes_against_women_2001-2014.csv to crimes_against_women_2001-2014.csv\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "uploaded=files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "df=pd.read_csv('crimes_against_women_2001-2014.csv')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 614
        },
        "id": "qvaXEkksW2Jh",
        "outputId": "88952cd3-1e98-498c-b038-42d313a54ebd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Unnamed: 0        STATE/UT           DISTRICT  Year  Rape  \\\n",
              "0               0  ANDHRA PRADESH           ADILABAD  2001    50   \n",
              "1               1  ANDHRA PRADESH          ANANTAPUR  2001    23   \n",
              "2               2  ANDHRA PRADESH           CHITTOOR  2001    27   \n",
              "3               3  ANDHRA PRADESH           CUDDAPAH  2001    20   \n",
              "4               4  ANDHRA PRADESH      EAST GODAVARI  2001    23   \n",
              "...           ...             ...                ...   ...   ...   \n",
              "10672         832     Lakshadweep        Lakshadweep  2014     1   \n",
              "10673         833     Lakshadweep  Total District(s)  2014     1   \n",
              "10674         834      Puducherry           Karaikal  2014     3   \n",
              "10675         835      Puducherry         Puducherry  2014     7   \n",
              "10676         836      Puducherry  Total District(s)  2014    10   \n",
              "\n",
              "       Kidnapping and Abduction  Dowry Deaths  \\\n",
              "0                            30            16   \n",
              "1                            30             7   \n",
              "2                            34            14   \n",
              "3                            20            17   \n",
              "4                            26            12   \n",
              "...                         ...           ...   \n",
              "10672                         0             0   \n",
              "10673                         0             0   \n",
              "10674                         1             0   \n",
              "10675                         6             1   \n",
              "10676                         7             1   \n",
              "\n",
              "       Assault on women with intent to outrage her modesty  \\\n",
              "0                                                    149     \n",
              "1                                                    118     \n",
              "2                                                    112     \n",
              "3                                                    126     \n",
              "4                                                    109     \n",
              "...                                                  ...     \n",
              "10672                                                  1     \n",
              "10673                                                  1     \n",
              "10674                                                 12     \n",
              "10675                                                 20     \n",
              "10676                                                 32     \n",
              "\n",
              "       Insult to modesty of Women  Cruelty by Husband or his Relatives  \\\n",
              "0                              34                                  175   \n",
              "1                              24                                  154   \n",
              "2                              83                                  186   \n",
              "3                              38                                   57   \n",
              "4                              58                                  247   \n",
              "...                           ...                                  ...   \n",
              "10672                           2                                    0   \n",
              "10673                           2                                    0   \n",
              "10674                           1                                    1   \n",
              "10675                           7                                    3   \n",
              "10676                           8                                    4   \n",
              "\n",
              "       Importation of Girls  \n",
              "0                         0  \n",
              "1                         0  \n",
              "2                         0  \n",
              "3                         0  \n",
              "4                         0  \n",
              "...                     ...  \n",
              "10672                     0  \n",
              "10673                     0  \n",
              "10674                     0  \n",
              "10675                     0  \n",
              "10676                     0  \n",
              "\n",
              "[10677 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d338a2ea-a74c-4a38-9de1-24f82510eb77\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>STATE/UT</th>\n",
              "      <th>DISTRICT</th>\n",
              "      <th>Year</th>\n",
              "      <th>Rape</th>\n",
              "      <th>Kidnapping and Abduction</th>\n",
              "      <th>Dowry Deaths</th>\n",
              "      <th>Assault on women with intent to outrage her modesty</th>\n",
              "      <th>Insult to modesty of Women</th>\n",
              "      <th>Cruelty by Husband or his Relatives</th>\n",
              "      <th>Importation of Girls</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>ANDHRA PRADESH</td>\n",
              "      <td>ADILABAD</td>\n",
              "      <td>2001</td>\n",
              "      <td>50</td>\n",
              "      <td>30</td>\n",
              "      <td>16</td>\n",
              "      <td>149</td>\n",
              "      <td>34</td>\n",
              "      <td>175</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>ANDHRA PRADESH</td>\n",
              "      <td>ANANTAPUR</td>\n",
              "      <td>2001</td>\n",
              "      <td>23</td>\n",
              "      <td>30</td>\n",
              "      <td>7</td>\n",
              "      <td>118</td>\n",
              "      <td>24</td>\n",
              "      <td>154</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>ANDHRA PRADESH</td>\n",
              "      <td>CHITTOOR</td>\n",
              "      <td>2001</td>\n",
              "      <td>27</td>\n",
              "      <td>34</td>\n",
              "      <td>14</td>\n",
              "      <td>112</td>\n",
              "      <td>83</td>\n",
              "      <td>186</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>ANDHRA PRADESH</td>\n",
              "      <td>CUDDAPAH</td>\n",
              "      <td>2001</td>\n",
              "      <td>20</td>\n",
              "      <td>20</td>\n",
              "      <td>17</td>\n",
              "      <td>126</td>\n",
              "      <td>38</td>\n",
              "      <td>57</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>ANDHRA PRADESH</td>\n",
              "      <td>EAST GODAVARI</td>\n",
              "      <td>2001</td>\n",
              "      <td>23</td>\n",
              "      <td>26</td>\n",
              "      <td>12</td>\n",
              "      <td>109</td>\n",
              "      <td>58</td>\n",
              "      <td>247</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10672</th>\n",
              "      <td>832</td>\n",
              "      <td>Lakshadweep</td>\n",
              "      <td>Lakshadweep</td>\n",
              "      <td>2014</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10673</th>\n",
              "      <td>833</td>\n",
              "      <td>Lakshadweep</td>\n",
              "      <td>Total District(s)</td>\n",
              "      <td>2014</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10674</th>\n",
              "      <td>834</td>\n",
              "      <td>Puducherry</td>\n",
              "      <td>Karaikal</td>\n",
              "      <td>2014</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10675</th>\n",
              "      <td>835</td>\n",
              "      <td>Puducherry</td>\n",
              "      <td>Puducherry</td>\n",
              "      <td>2014</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>20</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10676</th>\n",
              "      <td>836</td>\n",
              "      <td>Puducherry</td>\n",
              "      <td>Total District(s)</td>\n",
              "      <td>2014</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>32</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10677 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d338a2ea-a74c-4a38-9de1-24f82510eb77')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d338a2ea-a74c-4a38-9de1-24f82510eb77 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d338a2ea-a74c-4a38-9de1-24f82510eb77');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b633e6f0-e679-4570-987b-76ef19ad05f7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b633e6f0-e679-4570-987b-76ef19ad05f7')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b633e6f0-e679-4570-987b-76ef19ad05f7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GOWUdroKW5lY",
        "outputId": "2298a305-3ca6-4092-be15-8740096849dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 10677 entries, 0 to 10676\n",
            "Data columns (total 11 columns):\n",
            " #   Column                                               Non-Null Count  Dtype \n",
            "---  ------                                               --------------  ----- \n",
            " 0   Unnamed: 0                                           10677 non-null  int64 \n",
            " 1   STATE/UT                                             10677 non-null  object\n",
            " 2   DISTRICT                                             10677 non-null  object\n",
            " 3   Year                                                 10677 non-null  int64 \n",
            " 4   Rape                                                 10677 non-null  int64 \n",
            " 5   Kidnapping and Abduction                             10677 non-null  int64 \n",
            " 6   Dowry Deaths                                         10677 non-null  int64 \n",
            " 7   Assault on women with intent to outrage her modesty  10677 non-null  int64 \n",
            " 8   Insult to modesty of Women                           10677 non-null  int64 \n",
            " 9   Cruelty by Husband or his Relatives                  10677 non-null  int64 \n",
            " 10  Importation of Girls                                 10677 non-null  int64 \n",
            "dtypes: int64(9), object(2)\n",
            "memory usage: 917.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. **Frame** ***10*** ***questions*** **on** **Probability** **bold text** & **Statistics**\n",
        "\n"
      ],
      "metadata": {
        "id": "wiY2trIKXFz2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. What is the probability distribution of the number of crimes against women in a specific year within the dataset?\n",
        "yearly_crimes = df.groupby('Year')['Dowry Deaths'].sum()\n",
        "yearly_probability_distribution = yearly_crimes / yearly_crimes.sum()\n",
        "print(yearly_probability_distribution)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KD6ngEruW90n",
        "outputId": "214ca992-84d7-42aa-968e-f0e03da61cbb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Year\n",
            "2001    0.063588\n",
            "2002    0.063319\n",
            "2003    0.057620\n",
            "2004    0.065213\n",
            "2005    0.062994\n",
            "2006    0.070707\n",
            "2007    0.075116\n",
            "2008    0.075849\n",
            "2009    0.077808\n",
            "2010    0.077882\n",
            "2011    0.079989\n",
            "2012    0.076415\n",
            "2013    0.075023\n",
            "2014    0.078476\n",
            "Name: Dowry Deaths, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#2.What is the probability distribution of the number of rape cases by year?\n",
        "# Calculate probability distribution\n",
        "rape_prob_dist = df.groupby('Year')['Rape'].sum() / df.groupby('Year')['Rape'].sum().sum()\n",
        "print(rape_prob_dist)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3tr_mdlDXurt",
        "outputId": "8d0c1d96-1014-4632-ef81-04b2fcb25109"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Year\n",
            "2001    0.051925\n",
            "2002    0.052888\n",
            "2003    0.051189\n",
            "2004    0.058896\n",
            "2005    0.059303\n",
            "2006    0.062498\n",
            "2007    0.066985\n",
            "2008    0.069343\n",
            "2009    0.069116\n",
            "2010    0.071620\n",
            "2011    0.078190\n",
            "2012    0.080506\n",
            "2013    0.108880\n",
            "2014    0.118661\n",
            "Name: Rape, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3.How does the average number of Kidnapping and Abduction cases change over the years?\n",
        "# Calculate the average number of Kidnapping and Abduction cases by year\n",
        "average_kidnapping = df.groupby('Year')['Kidnapping and Abduction'].mean()\n",
        "print(average_kidnapping)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j5iO30iPYvzd",
        "outputId": "083a5e76-8ff2-48c1-f35a-390cbb52adeb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Year\n",
            "2001     40.907821\n",
            "2002     40.350487\n",
            "2003     36.527473\n",
            "2004     42.737997\n",
            "2005     42.974079\n",
            "2006     47.064865\n",
            "2007     54.955585\n",
            "2008     60.286465\n",
            "2009     67.121252\n",
            "2010     76.495507\n",
            "2011     89.924147\n",
            "2012     94.357583\n",
            "2013    126.077764\n",
            "2014    136.943847\n",
            "Name: Kidnapping and Abduction, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#4.Are there any correlations between Assault on women with intent to outrage her modesty and Cruelty by Husband or his Relatives?\n",
        "# Calculate the correlation between the two variables\n",
        "correlation = df['Assault on women with intent to outrage her modesty'].corr(df['Cruelty by Husband or his Relatives'])\n",
        "print(f\"Correlation: {correlation}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J-9hYj6RY8Uz",
        "outputId": "7e67967b-3cf0-4056-ba69-4a1bd293f598"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation: 0.7441170289824613\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#5.What is the probability that the number of rape cases is influenced by the state/UT where the crime occurs?\n",
        "# Calculate probability of rape cases by state/UT\n",
        "rape_prob_by_state = df.groupby('STATE/UT')['Rape'].sum() / df['Rape'].sum()\n",
        "print(rape_prob_by_state)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4OCVhcfwY8WE",
        "outputId": "9aa64df9-246e-49b4-98c4-5cfa0a50cfe0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "STATE/UT\n",
            "A & N ISLANDS        0.000352\n",
            "A & N Islands        0.000103\n",
            "A&N Islands          0.000087\n",
            "ANDHRA PRADESH       0.043540\n",
            "ARUNACHAL PRADESH    0.001615\n",
            "                       ...   \n",
            "UTTARAKHAND          0.004451\n",
            "Uttar Pradesh        0.021051\n",
            "Uttarakhand          0.001609\n",
            "WEST BENGAL          0.067146\n",
            "West Bengal          0.010178\n",
            "Name: Rape, Length: 72, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#6.What is the probability of a crime being reported or unreported?\n",
        "# Calculate the probability of a crime being reported\n",
        "reported_probability = df['Rape'].mean()\n",
        "print(f\"Probability of a crime being reported: {reported_probability}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u97N6FVUZORA",
        "outputId": "a7bbb7a6-55da-4c0b-c421-e0c99a037da1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Probability of a crime being reported: 57.98988479910087\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#7.What is the probability of certain crime types being correlated with each other in the dataset?\n",
        "# Calculate correlation matrices for different crime types and visualize the relationships\n",
        "correlation_matrix = df[['Rape', 'Kidnapping and Abduction', 'Dowry Deaths']].corr()\n",
        "print(correlation_matrix)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ogw5H3BlZ1Vf",
        "outputId": "a4e9fe8b-81ec-4f6c-f688-c53c4de5a58b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                              Rape  Kidnapping and Abduction  Dowry Deaths\n",
            "Rape                      1.000000                  0.765154      0.707507\n",
            "Kidnapping and Abduction  0.765154                  1.000000      0.791341\n",
            "Dowry Deaths              0.707507                  0.791341      1.000000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 8. How many districts are there in the state of Puducherry in the dataset?\n",
        "districts_in_Puducherry = df[df['STATE/UT'] == 'Puducherry']['DISTRICT'].nunique()\n",
        "print(\"3. Number of districts in Puducherry:\", districts_in_Puducherry)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rSIdJ7OQa0_Q",
        "outputId": "df29d65d-e60e-4e51-b29f-69f941b3ba30"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3. Number of districts in Puducherry: 6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 9. How many districts in the dataset experienced zero dowry death cases in 2001?\n",
        "districts_with_zero_dowry_death_2001 = df[(df['Year'] == 2001) & (df['Dowry Deaths'] == 0)]['DISTRICT'].nunique()\n",
        "print(\"11. Number of districts with zero dowry death cases in 2001:\", districts_with_zero_dowry_death_2001)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SSXT_l4ma1KJ",
        "outputId": "5cb68713-560a-49ac-c041-8b0412dfd5dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "11. Number of districts with zero dowry death cases in 2001: 164\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#10.How does the average number of \"Dowry Deaths\" change over the years?\n",
        "# Calculate the average number of Dowry Deaths by year\n",
        "average_dowry_deaths = df.groupby('Year')['Dowry Deaths'].mean()\n",
        "print(average_dowry_deaths)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xKUkz5Y1a1Ti",
        "outputId": "1ff72ca8-4090-4634-b095-5e0f309cda6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Year\n",
            "2001    19.136872\n",
            "2002    18.976356\n",
            "2003    17.054945\n",
            "2004    19.275720\n",
            "2005    18.518417\n",
            "2006    20.589189\n",
            "2007    21.784657\n",
            "2008    21.477004\n",
            "2009    21.859192\n",
            "2010    21.543004\n",
            "2011    21.790139\n",
            "2012    20.303329\n",
            "2013    19.642770\n",
            "2014    20.203106\n",
            "Name: Dowry Deaths, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2**.**Dispersion** **for** **the** **parameters**\n",
        "\n",
        "Dispersion measures in statistics quantify the spread or variability of data. For your dataset with the parameters related to different types of crimes against women, you can calculate dispersion for the specific parameters you're interested in. Common dispersion measures include the range, variance, and standard deviation"
      ],
      "metadata": {
        "id": "fAmquKMqbpy2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#RANGE\n",
        "# Calculate the range for 'Rape' cases\n",
        "rape_range = df['Rape'].max() - df['Rape'].min()\n",
        "print(f\"Range of 'Rape' cases: {rape_range}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SjEnHg0TbkzU",
        "outputId": "c747bcdb-4313-4ae4-b34a-eb4638483d7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Range of 'Rape' cases: 5076\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#VARIANCE\n",
        "# Calculate the variance for 'Kidnapping and Abduction' cases\n",
        "kidnapping_variance = df['Kidnapping and Abduction'].var()\n",
        "print(f\"Variance of 'Kidnapping and Abduction' cases: {kidnapping_variance}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e9bVA3Lfb_vR",
        "outputId": "5e38eea5-7ff4-4ce2-d85d-5ba7ae919589"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Variance of 'Kidnapping and Abduction' cases: 97109.1746836754\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#STANDARA DEVIATION\n",
        "# Calculate the standard deviation for 'Dowry Deaths' cases\n",
        "dowry_deaths_std_dev = df['Dowry Deaths'].std()\n",
        "print(f\"Standard Deviation of 'Dowry Deaths' cases: {dowry_deaths_std_dev}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KbokcSaKcFTB",
        "outputId": "58c3609c-0c63-4d85-a8ec-f9bdb3d1670b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Standard Deviation of 'Dowry Deaths' cases: 98.27653057365363\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**3**.**Data** **distribution**\n",
        "\n",
        "Data distribution refers to the way data is spread, or distributed, across different values or categories within a dataset\n",
        "Normal Distribution (Gaussian Distribution): In a normal distribution, data is symmetrically distributed around the mean, forming a bell-shaped curve. Many natural phenomena, such as heights or exam scores, tend to follow a normal distribution.\n",
        "\n",
        "1.Uniform Distribution: In a uniform distribution, data is evenly distributed across the entire range of values. This means that all values have the same probability of occurring.\n",
        "\n",
        "2.Skewed Distribution: Skewed distributions are asymmetrical, with more data points concentrated on one side of the distribution than the other. Positive skew (right-skewed) means the tail extends to the right, and negative skew (left-skewed) means the tail extends to the left.\n",
        "\n",
        "3.Exponential Distribution: In an exponential distribution, data decreases rapidly as values increase. It is commonly used to model the time between events in a Poisson process.\n",
        "\n",
        "4.Poisson Distribution: The Poisson distribution is used to model the number of events occurring within a fixed interval of time or space. It is often used for count data, such as the number of emails received in an hour.\n",
        "\n",
        "5.Binomial Distribution: The binomial distribution models the number of successful outcomes in a fixed number of independent Bernoulli trials. It is commonly used for scenarios like coin flips or yes/no questions.\n",
        "\n"
      ],
      "metadata": {
        "id": "7AfPW1mxcVfM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "4.**Visualize** **above** **with** **Distribution**, **Histogram**  & **Scatter** **Plots**"
      ],
      "metadata": {
        "id": "GtIl0KWtdtDv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Generate synthetic data for different distributions\n",
        "np.random.seed(42)\n",
        "\n",
        "# Normal Distribution\n",
        "normal_data = np.random.normal(loc=0, scale=1, size=1000)\n",
        "\n",
        "# Uniform Distribution\n",
        "uniform_data = np.random.uniform(low=0, high=1, size=1000)\n",
        "\n",
        "# Skewed Distribution (right-skewed)\n",
        "skewed_data = np.random.exponential(scale=1, size=1000)\n",
        "\n",
        "# Exponential Distribution\n",
        "exponential_data = np.random.exponential(scale=1, size=1000)\n",
        "\n",
        "# Poisson Distribution\n",
        "poisson_data = np.random.poisson(lam=3, size=1000)"
      ],
      "metadata": {
        "id": "R1h8rqwccPH7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Histogram.\n",
        "data_2014 = df[df['Year'] == 2014]\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.hist(data_2014['Dowry Deaths'], bins=15, color='lightcoral')\n",
        "plt.title('Distribution of Dowry Death Cases in 2014')\n",
        "plt.xlabel('Number of Cases')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "-ad-s4Bxebpw",
        "outputId": "e2646f2d-cc0f-485f-f0f8-a35862da873e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Create a scatter plot\n",
        "plt.figure(figsize=(8, 6))\n",
        "\n",
        "x = np.random.normal(0, 1, 100)\n",
        "y = 2 * x + np.random.normal(0, 1, 100)\n",
        "\n",
        "plt.scatter(x, y, color='blue', alpha=0.7)\n",
        "plt.title('Scatter Plot')\n",
        "plt.xlabel('X')\n",
        "plt.ylabel('Y')\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "6sKNIYKofh8E",
        "outputId": "dd5a4956-db72-42b6-e037-972271baef28"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**5**.**Test** **statistic**"
      ],
      "metadata": {
        "id": "44Mtl50kgR7c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import scipy.stats as stats\n",
        "# Extract the \"Rape\" cases for the two years of interest (e.g., 2001 and 2014)\n",
        "rape_2001 = df[df['Year'] == 2001]['Rape']\n",
        "rape_2014 = df[df['Year'] == 2014]['Rape']\n",
        "\n",
        "# Calculate the t-statistic and p-value for the two groups\n",
        "t_statistic, p_value = stats.ttest_ind(rape_2001, rape_2014)\n",
        "\n",
        "# Display the results\n",
        "print(\"T-Statistic:\", t_statistic)\n",
        "print(\"P-Value:\", p_value)\n",
        "\n",
        "# Interpret the results\n",
        "alpha = 0.05  # Set your significance level\n",
        "if p_value < alpha:\n",
        "    print(\"Reject the null hypothesis\")\n",
        "else:\n",
        "    print(\"Fail to reject the null hypothesis\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IckkQKqXfh9M",
        "outputId": "afe1bcf8-74eb-462d-ae3b-726866552929"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "T-Statistic: -3.181295619586638\n",
            "P-Value: 0.00149520493041393\n",
            "Reject the null hypothesis\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "6.**Test** **type** (**T**-**test**, **Z**-**test**, **F**-**test**, **ANNOVA**, **Chi**-**Square**, **PCA**)"
      ],
      "metadata": {
        "id": "YstqNBsDgX8-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#T-Test (Independent Samples T-Test):\n",
        "import pandas as pd\n",
        "import scipy.stats as stats\n",
        "\n",
        "# Extract the \"Rape\" cases for the two years of interest\n",
        "rape_2001 = df[df['Year'] == 2001]['Rape']\n",
        "rape_2014 = df[df['Year'] == 2014]['Rape']\n",
        "\n",
        "# Perform a T-test\n",
        "t_statistic, p_value = stats.ttest_ind(rape_2001, rape_2014)\n",
        "print(\"T-Statistic:\", t_statistic)\n",
        "print(\"P-Value:\", p_value)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tAGXX0vFfiCZ",
        "outputId": "6a3376b2-463a-4adf-acbf-bb57d849e4da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "T-Statistic: -3.181295619586638\n",
            "P-Value: 0.00149520493041393\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ANOVA\n",
        "import statsmodels.api as sm\n",
        "from statsmodels.formula.api import ols\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_csv('crimes_against_women_2001-2014.csv')\n",
        "\n",
        "# Fit an ANOVA model\n",
        "model = ols('Rape ~ C(Year)', data=df).fit()\n",
        "\n",
        "# Perform ANOVA\n",
        "anova_table = sm.stats.anova_lm(model, typ=2)\n",
        "print(anova_table)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m6vGopUyfiDn",
        "outputId": "894f93ac-b84e-47a8-aaa7-1b645f45f518"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                sum_sq       df         F    PR(>F)\n",
            "C(Year)   1.743729e+06     13.0  2.929494  0.000285\n",
            "Residual  4.882277e+08  10663.0       NaN       NaN\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#F-Test (Variance Ratio Test):\n",
        "import scipy.stats as stats\n",
        "\n",
        "# Sample data for two or more groups\n",
        "group1 = [10, 12, 14, 15, 18]\n",
        "group2 = [8, 11, 13, 15, 19]\n",
        "# More groups...\n",
        "\n",
        "# Perform an F-test\n",
        "f_statistic, p_value = stats.f_oneway(group1, group2)\n",
        "print(\"F-Statistic:\", f_statistic)\n",
        "print(\"P-Value:\", p_value)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8CQfjePfhVAC",
        "outputId": "5351b92f-5376-4149-a22f-71772b946248"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "F-Statistic: 0.06818181818181819\n",
            "P-Value: 0.8005988988359439\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#PCA\n",
        "from sklearn.decomposition import PCA\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Select the columns for PCA (excluding non-numeric columns)\n",
        "numeric_columns = df.select_dtypes(include=['int64']).drop(columns=['Unnamed: 0'])\n",
        "pca_data = numeric_columns.values\n",
        "\n",
        "# Perform PCA\n",
        "pca = PCA(n_components=2)\n",
        "principal_components = pca.fit_transform(pca_data)\n",
        "\n",
        "# Plot the explained variance\n",
        "explained_variance = pca.explained_variance_ratio_\n",
        "print(\"Explained Variance:\", explained_variance)\n",
        "\n",
        "# Create a scatter plot of the first two principal components\n",
        "plt.scatter(principal_components[:, 0], principal_components[:, 1])\n",
        "plt.xlabel(\"Principal Component 1\")\n",
        "plt.ylabel(\"Principal Component 2\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "76nh2NeThVBc",
        "outputId": "aac1ca92-7f40-45b4-85a4-b9b25cc8da66"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Explained Variance: [0.87009015 0.0755873 ]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**7**.**Interpreting** **test** **statistics**\n",
        "**Submission**"
      ],
      "metadata": {
        "id": "c-rx_jIRijIn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import scipy.stats as stats\n",
        "\n",
        "# Extract the relevant data for the t-test\n",
        "group1 = df[df['Year'] == 2001]['Rape']\n",
        "group2 = df[df['Year'] == 2014]['Rape']\n",
        "\n",
        "# Perform a t-test\n",
        "t_statistic, p_value = stats.ttest_ind(group1, group2)\n",
        "\n",
        "# Define your significance level (alpha)\n",
        "alpha = 0.05\n",
        "\n",
        "# Interpret the results\n",
        "if p_value < alpha:\n",
        "    print(\"Reject the null hypothesis.\")\n",
        "    print(\"There is a significant difference between the groups.\")\n",
        "else:\n",
        "    print(\"Fail to reject the null hypothesis.\")\n",
        "    print(\"There is no significant difference between the groups.\")\n",
        "\n",
        "# Print the t-statistic and p-value\n",
        "print(\"T-Statistic:\", t_statistic)\n",
        "print(\"P-Value:\", p_value)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L6VFtE6miq4h",
        "outputId": "3843bdfb-28e5-43f1-d241-9190e60e05a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reject the null hypothesis.\n",
            "There is a significant difference between the groups.\n",
            "T-Statistic: -3.181295619586638\n",
            "P-Value: 0.00149520493041393\n"
          ]
        }
      ]
    }
  ]
}
